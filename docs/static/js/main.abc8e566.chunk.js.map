{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","cats","type","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","author","username","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","setData","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACtBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAeO,OACjCN,EAAS,MAKb,UACI,uBACIO,KAAK,OACLR,MAAOA,EACPS,SAjBc,SAACN,GACvBF,EAASE,EAAEO,OAAOV,UAkBd,iD,+BCzBCW,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,gDACiCC,UAAUH,GAD3C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,SACZC,MAAOJ,EAAII,MACXZ,IAAKQ,EAAIK,OAAOC,iBAAiBd,QAVrB,kBAcbM,GAda,4CAAH,sDCERS,EAAe,SAAC,GAA+B,EAA7BN,GAA8B,IAA1BC,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAE9C,OACI,sBAAKgB,UAAU,OAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,4BAAIA,IACJ,oCAAOF,SCFNS,EAAW,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACvB,ECJwB,SAACA,GACzB,MAAwBb,mBAAS,CAC7BoB,KAAM,GACNe,SAAS,IAFb,mBAAOf,EAAP,KAAagB,EAAb,KAeA,OAVAC,qBAAU,WACNzB,EAASC,GACJyB,MAAK,SAAAC,GACFH,EAAQ,CACJhB,KAAMmB,EACNJ,SAAS,SAGtB,CAACtB,IAEGO,EDZyBoB,CAAa3B,GAAjCe,EAAZ,EAAOR,KAAae,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAEnD,sBAAKkB,UAAU,kDAAf,UACKI,GAAW,mBAAGJ,UAAU,oCAAb,qBAGRH,EAAON,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,cEqBtBiB,EApCM,WAGjB,MAAoCzC,mBAAS,CAAC,qBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BASQ2C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CACAA,SAAWA,GACNA,Y,MC1B7B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.abc8e566.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [value, setValue] = useState('')\r\n    const handleInputChange = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(e.target.value);\r\n        if (value.trim().length > 2) {\r\n            setCategories(cats => [value, ...cats]);\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={value}\r\n                onChange={handleInputChange}\r\n            />\r\n            <h2>AddCategory</h2>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifts = async (category) => {\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=0OEh5CpUuGJrjADfJ2H9QG1NBWck2nGr`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            author: img.username,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","\r\n\r\nexport const GiftGridItem = ({ id, author, title, url }) => {\r\n    \r\n    return (\r\n        <div className='card'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n            <p>By {author}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GiftGridItem } from \"./GiftGridItem\";\r\n\r\n\r\nexport const GiftGrid = ({ category }) => {\r\n    const {data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n\r\n            <div className='card-grid animate__animated animate__backInLeft'>\r\n                {loading && <p className=\"animate__animated animate__fadeIn\" >Loading</p> }\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GiftGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                    // images.map(img => {\r\n                    //     return <li key={img.id}>{img.title}</li>\r\n                    // })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifts } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [data, setData] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifts(category)\r\n            .then(imgs => {\r\n                setData({\r\n                    data: imgs,\r\n                    loading: false,\r\n                })\r\n            });\r\n    }, [category])\r\n\r\n    return data;\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GiftGrid } from \"./components/GiftGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['My Hero Academia','Demon Slayer','Attack of Titans'];\r\n    const [categories, setCategories] = useState(['My Hero Academia']);\r\n    // const handleAdd = () => {\r\n    //     //setCategories(['My Hero Academia','Demon Slayer','Attack of Titans','Naruto Shippudent']);\r\n    //     setCategories([...categories,'Naruto Shipudden']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    // //map tiene dos elementos, indice y objeto\r\n                    // categories.map((category) => {\r\n                    //     //React necesita diferenciar cada li, por ello  se usa key\r\n                    //     return <li key={category}>{category}</li>\r\n                    // })\r\n\r\n                    //map tiene dos elementos, indice y objeto\r\n                    categories.map((category) =>\r\n                        <GiftGrid \r\n                        category= {category}\r\n                        key={category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}